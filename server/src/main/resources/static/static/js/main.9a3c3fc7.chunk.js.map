{"version":3,"sources":["resources/home_otter_red_background.png","components/SimpleImage.tsx","components/HeaderMenu.tsx","components/LandingSection.tsx","components/RegisterSection.tsx","components/LoginSection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","SimpleImage","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","mode","src","height","width","style","objectWithoutProperties","size","fill","fit","important","backgroundImage","concat","backgroundSize","backgroundPosition","backgroundRepeat","react_default","a","createElement","assign","objectSpread","Component","defaultProps","HeaderMenu","position","zIndex","navbar","className","Group","align","Alignment","LEFT","Heading","href","SimpleImage_SimpleImage","logo_red","RIGHT","Link","to","buttons","icon","iconSize","text","LandingSection","id","components_HeaderMenu","RegisterSection","_this","onSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","_submitSuccessful","wrap","_context","prev","next","preventDefault","validateForm","submitForm","submitSuccessful","sent","setState","state","stop","_x","apply","arguments","cookies","email","firstName","lastName","password","csrfToken","get","onInputChange","bind","assertThisInitialized","onToastDismissed","event","target","currentTarget","includes","name","defineProperty","value","console","log","fetch","method","headers","Accept","Content-Type","X-XSRF-TOKEN","body","JSON","stringify","passwordHash","response","status","_context2","t0","card","elevation","Elevation","THREE","formGroup","inputGroup","onChange","leftIcon","placeholder","type","toaster","toast","message","intent","Intent","SUCCESS","onDismiss","timeout","DANGER","LoginSection","_loginSuccessful","loginSuccessful","formData","URLSearchParams","append","toString","then","App","isAuthenticated","user","undefined","autoLogin","sessionId","credentials","parse","_this2","BrowserRouter","Switch","Route","exact","path","component","render","_props","components_LandingSection","components_RegisterSection","components_LoginSection","withCookies","Boolean","window","location","hostname","match","ReactDOM","es6","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a3c3fc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home_otter_red_background.ed422ee0.png\";","import React, { Component } from 'react';\r\n\r\nexport interface SimpleImageProps {\r\n    mode?: 'fill' | 'fit';\r\n    src?: string;\r\n    height?: number;\r\n    width?: number;\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nexport interface SimpleImageState {\r\n}\r\n\r\nexport default class SimpleImage extends Component<SimpleImageProps, SimpleImageState> {\r\n    static defaultProps: SimpleImageProps;\r\n\r\n    constructor(props: SimpleImageProps) {\r\n        super(props)\r\n    }\r\n\r\n    public render() {\r\n        const { mode, src, height, width, style, ...props } = this.props\r\n        const modes = {\r\n            'fill': 'cover',\r\n            'fit': 'contain'\r\n        };\r\n        const size = modes[mode || 'fit'];\r\n\r\n        const important = {\r\n            backgroundImage: `url('${src}')`,\r\n            backgroundSize: size,\r\n            backgroundPosition: 'center center',\r\n            backgroundRepeat: 'no-repeat',\r\n            width: width,\r\n            height: height,\r\n        };\r\n\r\n        return <div {...props} style={{ ...style, ...important }} />\r\n    }\r\n}\r\n\r\nSimpleImage.defaultProps = {\r\n    height: 60,\r\n    width: 60,\r\n    mode: 'fit',\r\n};","import React, { Component } from 'react';\r\nimport '../scss/HeaderMenu.scss';\r\nimport logo_red from '../resources/home_otter_red_background.png';\r\nimport SimpleImage from './SimpleImage'\r\n\r\nimport {\r\n    Alignment,\r\n    Button,\r\n    Navbar,\r\n    Icon,\r\n} from \"@blueprintjs/core\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass HeaderMenu extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\r\n                <Navbar className=\"navbar\">\r\n                    <Navbar.Group align={Alignment.LEFT}>\r\n                        <Navbar.Heading>\r\n                            <a href=\"/\">\r\n                                <SimpleImage src={logo_red} />\r\n                            </a>\r\n                        </Navbar.Heading>\r\n                    </Navbar.Group>\r\n                    <Navbar.Group align={Alignment.RIGHT}>\r\n                        <Link to=\"/register\"><Button className=\"bp3-minimal\" icon={<Icon icon=\"new-person\" iconSize={20} />} text=\"Register\" /></Link>\r\n                        <Link to=\"/login\"> <Button className=\"bp3-minimal\" icon={<Icon icon=\"log-in\" iconSize={20} />} text=\"Login\" /></Link>\r\n                    </Navbar.Group>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderMenu;","import React, { Component } from 'react';\r\nimport '../scss/LandingSection.scss';\r\n\r\nimport HeaderMenu from './HeaderMenu';\r\n\r\nclass LandingSection extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <section id=\"landing-section\">\r\n                <HeaderMenu />\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LandingSection;","import React, { Component } from 'react';\r\nimport '../scss/RegisterSection.scss';\r\n\r\nimport {\r\n    FormGroup, InputGroup, Card, Button, Elevation, Toaster, Toast, Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { Cookies } from 'react-cookie';\r\n\r\ninterface RegisterSectionProps {\r\n    cookies?: Cookies\r\n}\r\n\r\ninterface RegisterSectionState {\r\n    email: string,\r\n    firstName: string,\r\n    lastName: string,\r\n    password: string,\r\n    submitSuccessful: boolean | null,\r\n    csrfToken: string\r\n}\r\n\r\nclass RegisterSection extends Component<RegisterSectionProps, RegisterSectionState> {\r\n\r\n    constructor(props: RegisterSectionProps) {\r\n        super(props);\r\n        const { cookies } = props;\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            password: \"\",\r\n            submitSuccessful: null,\r\n            csrfToken: cookies!!.get('XSRF-TOKEN'),\r\n        }\r\n\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onToastDismissed = this.onToastDismissed.bind(this);\r\n    }\r\n\r\n    onInputChange(event: React.FormEvent<HTMLInputElement>) {\r\n        const target = event.currentTarget;\r\n\r\n        if ([\"email\", \"firstName\", \"lastName\", \"password\"].includes(target.name)) {\r\n            // @ts-ignore\r\n            this.setState({\r\n                [target.name]: target.value\r\n            });\r\n        } else {\r\n            console.log(`Can't assign name \"${target.name}\" to form.`);\r\n        }\r\n    }\r\n\r\n    onSubmit = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n        e.preventDefault();\r\n\r\n        if (this.validateForm()) {\r\n            const submitSuccessful = await this.submitForm();\r\n            this.setState({ ...this.state, submitSuccessful });\r\n        }\r\n    }\r\n\r\n    onToastDismissed() {\r\n        this.setState({ ...this.state, submitSuccessful: null });\r\n    }\r\n\r\n\r\n    validateForm(): boolean {\r\n        // TODO: implement and give user feedback\r\n        return true;\r\n    }\r\n\r\n    async submitForm(): Promise<boolean> {\r\n        try {\r\n            const response = await fetch('/user_api/users', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'X-XSRF-TOKEN': this.state.csrfToken,\r\n                },\r\n                body: JSON.stringify({\r\n                    email: this.state.email,\r\n                    firstName: this.state.firstName,\r\n                    lastName: this.state.lastName,\r\n                    passwordHash: this.state.password,\r\n                })\r\n            });\r\n\r\n            return response.status === 200;\r\n        } catch (err) {\r\n            console.log(err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section id=\"register-section\" className=\"inside-landing-page-section\">\r\n                <Card elevation={Elevation.THREE}>\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <h1>Register</h1>\r\n                        <FormGroup>\r\n                            <InputGroup name=\"email\" value={this.state.email} onChange={this.onInputChange} leftIcon=\"envelope\" id=\"register-email-input\" placeholder=\"Email Address\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <InputGroup name=\"firstName\" value={this.state.firstName} onChange={this.onInputChange} leftIcon=\"person\" id=\"register-firstname-input\" placeholder=\"First Name\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <InputGroup name=\"lastName\" value={this.state.lastName} onChange={this.onInputChange} leftIcon=\"person\" id=\"register-lastname-input\" placeholder=\"Last Name\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <InputGroup name=\"password\" value={this.state.password} onChange={this.onInputChange} leftIcon=\"lock\" id=\"register-password\" placeholder=\"Password\" type=\"password\" />\r\n                        </FormGroup>\r\n\r\n                        <Button type=\"submit\" fill>Register</Button>\r\n                    </form>\r\n                </Card>\r\n\r\n                {this.state.submitSuccessful === true && (\r\n                    <Toaster><Toast message=\"Registration successful!\" intent={Intent.SUCCESS} onDismiss={this.onToastDismissed} timeout={3000} /></Toaster>\r\n                )}\r\n                {this.state.submitSuccessful === false && (\r\n                    <Toaster><Toast message=\"Registration failed!\" intent={Intent.DANGER} onDismiss={this.onToastDismissed} timeout={3000} /></Toaster>\r\n                )}\r\n            </section >\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegisterSection;","import React, { Component } from 'react';\r\nimport '../scss/LoginSection.scss';\r\n\r\nimport {\r\n    FormGroup, InputGroup, Card, Button, Elevation, Toaster, Toast, Intent,\r\n} from \"@blueprintjs/core\";\r\nimport { Cookies } from 'react-cookie';\r\n\r\ninterface LoginSectionProps {\r\n    cookies?: Cookies\r\n}\r\n\r\ninterface LoginSectionState {\r\n    email: string,\r\n    password: string,\r\n    loginSuccessful: boolean | null,\r\n    csrfToken: string\r\n}\r\n\r\nclass LoginSection extends Component<LoginSectionProps, LoginSectionState> {\r\n\r\n    constructor(props: LoginSectionProps) {\r\n        super(props);\r\n        const { cookies } = props;\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            loginSuccessful: null,\r\n            csrfToken: cookies!!.get('XSRF-TOKEN'),\r\n        };\r\n\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onToastDismissed = this.onToastDismissed.bind(this);\r\n    }\r\n\r\n    onInputChange(event: React.FormEvent<HTMLInputElement>) {\r\n        const target = event.currentTarget;\r\n\r\n        if ([\"email\", \"password\"].includes(target.name)) {\r\n            // @ts-ignore\r\n            this.setState({\r\n                [target.name]: target.value\r\n            });\r\n        } else {\r\n            console.log(`Can't assign name \"${target.name}\" to form.`);\r\n        }\r\n    }\r\n\r\n    onSubmit = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n        e.preventDefault();\r\n\r\n        if (this.validateForm()) {\r\n            const loginSuccessful = await this.submitForm();\r\n            this.setState({ ...this.state, loginSuccessful });\r\n        }\r\n    }\r\n\r\n    onToastDismissed() {\r\n        this.setState({ ...this.state, loginSuccessful: null });\r\n    }\r\n\r\n\r\n    validateForm(): boolean {\r\n        // TODO: implement and give user feedback\r\n        return true;\r\n    }\r\n\r\n    async submitForm(): Promise<boolean> {\r\n        try {\r\n            const formData = new URLSearchParams();\r\n            formData.append('email', this.state.email);\r\n            formData.append('password', this.state.password);\r\n\r\n            const response = await fetch('/user_api/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                    'X-XSRF-TOKEN': this.state.csrfToken\r\n                },\r\n                body: formData.toString()\r\n            });\r\n\r\n            response.text()\r\n                .then((body) => {\r\n                    console.log(body);\r\n                });\r\n\r\n            console.log(response);\r\n\r\n            return response.status === 200;\r\n        } catch (err) {\r\n            console.log(err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section id=\"login-section\" className=\"inside-landing-page-section\">\r\n                <Card elevation={Elevation.THREE}>\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <h1>Login</h1>\r\n                        <FormGroup>\r\n                            <InputGroup name=\"email\" value={this.state.email} onChange={this.onInputChange} leftIcon=\"envelope\" id=\"login-email-input\" placeholder=\"Email Address\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <InputGroup name=\"password\" value={this.state.password} onChange={this.onInputChange} leftIcon=\"lock\" id=\"login-password\" placeholder=\"Password\" type=\"password\" />\r\n                        </FormGroup>\r\n\r\n                        <Button type=\"submit\" fill>Login</Button>\r\n                    </form>\r\n                </Card>\r\n\r\n                {this.state.loginSuccessful === true && (\r\n                    <Toaster><Toast message=\"Login successful!\" intent={Intent.SUCCESS} onDismiss={this.onToastDismissed} timeout={3000} /></Toaster>\r\n                )}\r\n                {this.state.loginSuccessful === false && (\r\n                    <Toaster><Toast message=\"Login failed!\" intent={Intent.DANGER} onDismiss={this.onToastDismissed} timeout={3000} /></Toaster>\r\n                )}\r\n            </section >\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginSection;","import React, { Component } from 'react';\nimport LandingSection from './components/LandingSection';\nimport './scss/App.scss';\nimport RegisterSection from './components/RegisterSection';\nimport LoginSection from './components/LoginSection';\nimport { withCookies, Cookies } from 'react-cookie';\nimport { Switch, Route, RouteComponentProps } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Divider } from '@blueprintjs/core';\n\ninterface AppProps {\n  cookies?: Cookies\n}\ninterface AppState {\n  csrfToken: string,\n  isAuthenticated: boolean,\n  user: any | undefined\n}\n\nclass App extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    const { cookies } = props;\n\n    this.state = {\n      csrfToken: cookies!!.get('XSRF-TOKEN'),\n      isAuthenticated: false,\n      user: undefined\n    };\n\n    console.log(this.state.csrfToken);\n  }\n\n  async componentDidMount() {\n    this.autoLogin()\n  }\n\n  async autoLogin() {\n    const sessionId = this.props.cookies!!.get('JSESSIONID');\n    console.log(sessionId);\n\n    if (sessionId != undefined) {\n      const response = await fetch(`/user_api/session/${sessionId}`, { credentials: 'include' });\n      const body = await response.text();\n      console.log(\"onDidMount: \", body);\n      if (body === '') {\n        this.setState(({ isAuthenticated: false }))\n      } else {\n        console.log(body);\n        this.setState({ isAuthenticated: true, user: JSON.parse(body) })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"app\">\n        <BrowserRouter>\n          <Switch>\n            <Route exact path='/' component={LandingSection} />\n            <Route path='/register' render={\n              (_props: RouteComponentProps) => {\n                return (<div className=\"section-wrapper\">\n                  <LandingSection />\n                  <RegisterSection {...this.props} />\n                </div>);\n              }} />\n            <Route path='/login' render={\n              (_props: RouteComponentProps) => {\n                return (<div className=\"section-wrapper\">\n                  <LandingSection />\n                  <LoginSection {...this.props} />\n                </div>);\n              }} />\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { CookiesProvider } from 'react-cookie';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n\n\nReactDOM.render(\n    <CookiesProvider>\n        <App />\n    </CookiesProvider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}